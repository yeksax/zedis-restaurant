// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Menu category to organize menu items
model Category {
  id           String     @id @default(cuid())
  name         String
  slug         String     @unique // URL-friendly name
  description  String?
  displayOrder Int        @default(0) // For controlling display order in the UI
  type         MenuType // To differentiate between food, drinks, wine, etc.
  items        MenuItem[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

// Menu items that can be ordered
model MenuItem {
  id              String      @id @default(cuid())
  name            String
  description     String
  price           Decimal     @db.Decimal(10, 2)
  image           String // URL to the image (required)
  available       Boolean     @default(true)
  featured        Boolean     @default(false) // For highlighting special items
  isSpicy         Boolean     @default(false)
  isVegetarian    Boolean     @default(false)
  isVegan         Boolean     @default(false)
  glutenFree      Boolean     @default(false)
  preparationTime Int? // Estimated preparation time in minutes
  ingredients     String? // List of main ingredients
  allergens       String? // List of allergens
  categoryId      String
  category        Category    @relation(fields: [categoryId], references: [id])
  orderItems      OrderItem[]
  // Wine specific fields
  wineRegion      String? // For wines
  wineVintage     Int? // For wines
  wineGrapes      String? // For wines
  // Cocktail specific fields
  baseSpirit      String? // For cocktails
  glassType       String? // Type of glass served in
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

enum MenuType {
  ENTREES // Entradas
  MAIN_COURSES // Pratos Principais
  SEAFOOD // Frutos do Mar
  WINE // Carta de Vinhos
  DESSERTS // Sobremesas
  COCKTAILS // Drinks/Coquet√©is
}

// Customer orders
model Order {
  id                    Int              @id @default(autoincrement())
  clerkUserId           String // ID from Clerk authentication
  status                OrderStatus      @default(CREATED)
  type                  OrderType
  items                 OrderItem[]
  statusLogs            OrderStatusLog[] // Relation to status logs
  total                 Decimal          @db.Decimal(10, 2)
  address               String? // Required for delivery orders
  phoneNumber           String
  paymentIntent         String?          @unique() // Stripe payment intent ID
  paymentStatus         PaymentStatus    @default(PENDING)
  specialInstructions   String? // For any special requests
  estimatedDeliveryTime DateTime? // For delivery orders
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
}

// Individual items within an order
model OrderItem {
  id         String   @id @default(cuid())
  orderId    Int
  menuItemId String
  quantity   Int
  unitPrice  Decimal  @db.Decimal(10, 2)
  subtotal   Decimal  @db.Decimal(10, 2)
  notes      String? // Special instructions for this item
  order      Order    @relation(fields: [orderId], references: [id])
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Table reservations
model Reservation {
  id              String            @id @default(cuid())
  clerkUserId     String // ID from Clerk authentication
  date            String // Date in YYYY-MM-DD format
  time            String // Time in HH:mm format
  numberOfGuests  Int
  status          ReservationStatus @default(PENDING)
  specialRequests String? // Special requests or notes
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

enum OrderStatus {
  CREATED
  PAID
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum OrderType {
  DELIVERY
  PICKUP
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

// Track order status changes
model OrderStatusLog {
  id        String      @id @default(cuid())
  orderId   Int
  order     Order       @relation(fields: [orderId], references: [id])
  status    OrderStatus
  message   String? // Optional message explaining the status change
  createdBy String // Clerk user ID of who made the change (admin/system)
  createdAt DateTime    @default(now())

  @@index([orderId])
}

// Admin permissions for controlling access to admin panel
model AdminPermission {
  id              String   @id @default(cuid())
  clerkUserId     String   @unique // ID from Clerk authentication
  isFullAdmin     Boolean  @default(false) // Indicates full read/write admin capabilities
  readExplanation Boolean  @default(false) // Indicates if the user has read the explanation about permissions
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
